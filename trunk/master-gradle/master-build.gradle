import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'project-report'
//apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'signing'
//apply plugin: 'groovy'

//apply plugin: 'sonar'
//apply plugin: 'build-announcements'

configurations {
  compile
  source
  test
  reporting
  javac2
  codeCoverage
  versionUpdate
}

println """\

========================================================================================================
Welcome to Gradle!  This is version: $gradle.gradleVersion
              Gradle home is set to: $gradle.gradleHomeDir
    Gradle user directory is set to: $gradle.gradleUserHomeDir

                     Base directory: $projectDir


Running build script ${relativePath(buildFile)}
========================================================================================================

"""

repositories {
  mavenCentral()
  ivy {
            artifactPattern "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].[type]"
            ivyPattern      "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].ivy.xml"
  }
//    ivyF {
//            artifactPattern "/Users/douglas_bullard/Documents/Nurflugel.com website as a WAR/html/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].[type]"
//            ivyPattern  "/Users/douglas_bullard/Documents/Nurflugel.com website as a WAR/html/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].ivy.xml"
//          }
//    }
}

dependencies {
  ext.libraryVersions += [
    forms_rt:       '11.0.3',
    guice:          '3.0',
    intellij:       '11.0.3',
    jacoco:         '0.5.7.201204190339',
    javac2asm:      '3.3.1',
    jdom:           '1.0',
    reportng:       '1.1.2',
    velocity:       '1.4',
    version_tool:   '1.1.4_fixed'
  ]

  javac2 'com.intellij:javac2:'+                   libraryVersions.intellij,
         'com.intellij:annotations:'+              libraryVersions.intellij,
         'asm:asm-commons:'+                       libraryVersions.javac2asm,
         'asm:asm-parent:'+                        libraryVersions.javac2asm,
         'org.jdom:jdom:'+                         libraryVersions.jdom

  versionUpdate 'com.ryangrier.ant:version_tool:'+ libraryVersions.version_tool

  testCompile  'com.google.inject:guice:'+         libraryVersions.guice
  testCompile  ('velocity:velocity:'+              libraryVersions.velocity){transtive=true}
  testCompile  ('org.uncommons:reportng:'+         libraryVersions.reportng){transitive=false}

  codeCoverage 'org.jacoco:org.jacoco.build:'+     libraryVersions.jacoco
  codeCoverage 'org.jacoco:org.jacoco.ant:'+       libraryVersions.jacoco
//  runtime      'org.jacoco:org.jacoco.agent:'+     libraryVersions.jacoco
  codeCoverage 'org.jacoco:org.jacoco.agent:'+     libraryVersions.jacoco
  codeCoverage 'org.jacoco:org.jacoco.report:'+    libraryVersions.jacoco
  codeCoverage 'org.jacoco:org.jacoco.core:'+      libraryVersions.jacoco
  codeCoverage 'org.jacoco:org.jacoco.agent:'+     libraryVersions.jacoco
}

test {
  useTestNG()
  testLogging.showStandardStreams = true
  options.suites("src/test/testng-config/testng.xml")
//    todo - if we cant connect to the internet, bypass the next line
//  systemProperties "org.uncommons.reportng.stylesheet": "${projectDir}/master-gradle/hudsonesque.css"
  systemProperties "org.uncommons.reportng.stylesheet": "http://ant-master-build-scripts.googlecode.com/svn/trunk/master-gradle/hudsonesque.css"
  systemProperties "running.in.gradle": "yes"
  workingDir = 'build/'
  options {
    listeners << 'org.uncommons.reportng.HTMLReporter'
    listeners << 'org.uncommons.reportng.JUnitXMLReporter'
  }
}

//todo get version from specified file
def titleForDocumentation = archivesBaseName + ' ' + '1.0.6'
    
def copyrightString = 'Copyright &#169; 2008&#8211;2012  Douglas Bullard.  All Rights Reserved.'
def packageTitle = group

// this will fail, but still do what it's supposed to
javadoc {
  final overviewFile = "${projectDir}/src/main/java/overview.html"
  println "File to look for is "+ overviewFile
  
  if(new File(overviewFile).exists()){
    options.overview(overviewFile)
  }
  options.showAll()
  options.encoding('UTF-8')
  options.setUse(true)
  options.author(true)
  options.version(true)
  options.windowTitle(titleForDocumentation)
  options.docTitle(titleForDocumentation)
  options.footer(copyrightString)
}

//task zipSrc(type: Zip) {
//    appendix = 'src'
//    from sourceSets.main.allSource
//    into('build/dist')
//}


// we overwrite compileJava because the IDEA javac2 compiler is needed for GUI forms.
task compileJava (overwrite: true) << {

  theDir = file("${project.buildDir.path}/classes/main")
  //make any source dirs needed for the output
  theDir.mkdirs()

  mainSrcDir = "${projectDir}/src/main/java"
  destDir = "${projectDir}/build/classes/main"
  javaSoureCompatibility = sourceCompatibility
  javaTargetCompatibility = targetCompatibility
  optimize = "off"
  deprecation = "off"
  includeAntRuntime = false
  javaDeprecation = deprecation
  debugLevel = "lines,vars,source"
  debug = "on"
  classpath = configurations.compile.asPath

  compileJavac2(mainSrcDir, classpath, destDir, debug, debugLevel, javaDeprecation, includeAntRuntime, optimize, javaSoureCompatibility, javaTargetCompatibility)
}

private void compileJavac2(mainSrcDir, classpath, destDir, debug, debugLevel, deprecation, includeAntRuntime, optimize, sourceCompatibility, targetCompatibility)
{
  ant {
    taskdef(name: 'javac2',
            classname: 'com.intellij.ant.Javac2',
            classpath: configurations.javac2.asPath)

    javac2(srcdir: mainSrcDir,
           classpath: classpath,
           destdir: destDir,
           debug: debug,
           debugLevel: debugLevel,
           deprecation: deprecation,
           includeAntRuntime: includeAntRuntime,
           optimize: optimize,
           source: sourceCompatibility,
           target: targetCompatibility
    )
  }
}

//jacoco stuff below....

test {
//  jvmArgs "-javaagent:${configurations.codeCoverage.singleFile}=destfile=${buildDirName}/coverage-results/jacoco.exec,sessionid=HSServ,append=false",
//  jvmArgs "-javaagent:build/install/gradleTrunk/lib/org.jacoco.agent-0.5.7.201204190339.jar=destfile=build/reports/coverage-results/jacoco.exec,sessionid=HSServ,append=false",
//    'Djacoco=true',
//    '-Xms128m',
//    '-Xmx512m',
//    '-XX:MaxPermSize=128m'
}

//task generateCoverageReport (dependsOn: [test,installApp]) << {
task generateCoverageReport (dependsOn: [test]) << {
  ant {
    taskdef(name:'jacocoreport', classname: 'org.jacoco.ant.ReportTask') {
//      classpath path: "${rootProject.projectDir.path}/lib/jacocoant.jar"
      classpath path: "build/install/gradleTrunk/lib/org.jacoco.agent-0.5.7.201204190339.jar"
//      classpath path: configurations.codeCoverage.singleFile.
    }

    mkdir dir: "${buildDirName}/reports/coverage"

    jacocoreport {
      executiondata {
        fileset(dir: "build/reports/coverage-results") {
          ant.file file: 'jacoco.exec'
        }
      }

      structure(name: project.name) {

        classfiles {
          fileset dir: "${project.buildDir.path}/classes/main"
        }

        // this is for Windows
        sourcefiles(encoding: 'CP1252') {
          fileset dir: "${project.projectDir.path}/src/main/java"
        }
      }

      xml destfile: "build/reports/coverage/jacoco.xml"
      html destdir: "build/reports/coverage"
    }
  }
}

task whencejava(description: "Call this to find a class hiding in jar in a lib.  -className=com.some.class -DlibPath=parentdir/libdir.  If libPath is omitted, the compile classpath is used")<<{
//  logging.captureStandardOutput LogLevel.LIFECYCLE
  ant.taskdef(name: 'whenceJava', classname: 'com.nurflugel.buildtasks.WhenceJava', classpath: configurations.compile.asPath)
  libPath = System.getProperty('libPath')
  println "libPath = ${libPath}"
  if(libPath){
    ant.whenceJava(classToFind: System.getProperty('className'), libPath: libPath)
  }else{
    libPath=    configurations.compile.asPath
    println "libPath = ${libPath}"
    ant.whenceJava(classToFind: System.getProperty('className'), libPath: libPath)
  }
}

task versionMajor(description: "Increment the version number by a major version (i.e., from 1.0 to 2.0)")<<{ updateVersion("Major") }
task versionMinor(description: "Increment the version number by a major version (i.e., from v. 2.0.0 to v. 2.0.1)")<<{ updateVersion("Minor") }
task versionPoint(description: "Increment the version number by a major version (i.e., from v. 2.0.1 to v. 2.1.0)")<<{ updateVersion("Point") }

private void updateVersion(String versionUpdateType)
{
  //todo throw exception if versionClassName isn't defined.
  ant.taskdef(name: 'versionupdate', classname: 'com.ryangrier.ant.VersionUpdate', classpath: configurations.versionUpdate.asPath)
  ant.versionupdate(srcdir: sourceSets.main.java.getSrcDirs().toArray()[0].getAbsolutePath(),
                    classname: versionClassName,
                    variablename: "VERSION",
                    debug: "true",
                    versionupdatetype: versionUpdateType
  )
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.1'
}
